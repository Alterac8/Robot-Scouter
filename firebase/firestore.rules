service cloud.firestore {
  match /databases/{database}/documents {
    match /default-templates/{sub=**} {
      allow read;
    }

    match /teams/{teamId} {
      function isExistingOwner() {
        return resource.data.owners[request.auth.uid] is int;
      }
      function isValidTeam() {
        return request.resource.data.number is int
                 && request.resource.data.owners[request.auth.uid] == request.resource.data.number
                 && request.resource.data.templateId is string;
      }

      allow read: if request.auth != null; // TODO This and the others are bad but Firestore doesn't yet support an isOwner() call here
      allow create: if request.resource.data.owners[request.auth.uid] is int && isValidTeam();
      allow update: if (isExistingOwner() || hasPendingApproval()) && isValidTeam();
      allow delete: if isExistingOwner();

      match /scouts/{scoutId} {
        function isScoutOwner() {
          return get(/databases/$(database)/documents/teams/$(teamId)).data.owners[request.auth.uid] is int;
        }

        allow read, delete: if isScoutOwner();
        allow create, update: if isScoutOwner() && isValidScout();

        match /metrics/{metricId} {
          allow read, delete: if isScoutOwner();
          allow create, update: if isScoutOwner() && isValidMetric();
        }
      }
    }

    match /templates/{templateId} {
      function isExistingOwner() {
        return resource.data.owners[request.auth.uid] is timestamp;
      }
      function isTemplateOwner() {
        return get(/databases/$(database)/documents/templates/$(templateId)).data.owners[request.auth.uid] is timestamp;
      }

      allow read: if request.auth != null;
      allow create: if request.resource.data.owners[request.auth.uid] is timestamp && isValidScout();
      allow update: if (isExistingOwner() || hasPendingApproval()) && isValidScout();
      allow delete: if isExistingOwner();

      match /metrics/{metricId} {
        allow read, delete: if isTemplateOwner();
        allow create, update: if isTemplateOwner() && isValidMetric();
      }
    }

    match /users/{uid} {
      function isMatchingUid() {
        return uid == request.auth.uid
      }

      allow read, write: if isMatchingUid();

      match /prefs {
        match /{prefId} {
          allow read, delete: if isMatchingUid();
        }

        match /defaultTemplateId {
          allow create, update: if isMatchingUid()
                                    && (request.resource.data.value in ["-1", "0", "1"]
                                    || get(/databases/$(database)/documents/templates/$(request.resource.data.value)).data.owners[request.auth.uid] is timestamp);
        }

        match /nightMode {
          allow create, update: if isMatchingUid() && request.resource.data.value in ["auto", "yes", "no"];
        }

        match /uploadMediaToTba {
          allow create, update: if isMatchingUid() && request.resource.data.value in ["ask", "yes", "no"];
        }

        match /hasShownAddTeamTutorial {
          allow create, update: if isMatchingUid() && request.resource.data.value is bool;
        }

        match /hasShownSignInTutorial {
          allow create, update: if isMatchingUid() && request.resource.data.value is bool;
        }
      }
    }
  }
}

function hasPendingApproval() {
  return request.resource.data.pendingApprovals[request.auth.uid] in resource.data.activeTokens.keys();
}

function isValidScout() {
  return request.resource.data.templateId is string && request.resource.data.timestamp is timestamp;
}

function isValidMetric() {
  return request.resource.data.type in [0, 1, 2, 3, 4, 5] && request.resource.data.position is int;
}
