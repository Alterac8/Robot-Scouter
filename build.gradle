buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.0-alpha1'
        classpath 'com.google.gms:google-services:3.0.0'
        classpath 'com.github.triplet.gradle:play-publisher:1.2.0-beta1'
    }
}

allprojects {
    repositories {
        jcenter()
        flatDir { dirs 'libs' }
        maven { url 'https://maven.fabric.io/public' }
    }
//
//    apply plugin: 'checkstyle'
//    apply plugin: 'findbugs'
//    apply plugin: 'pmd'
//
//    checkstyle {
//        showViolations true
//        toolVersion '7.2'
//    }
//
//    task checkstyle(type: Checkstyle) {
//        configFile rootProject.file('checkstyle.xml')
//        source 'src'
//        include '**/*.java'
//        exclude '**/gen/**'
//
//        classpath = files()
//    }
//
//    task findbugs(type: FindBugs) {
//        ignoreFailures = false
//        effort = "max"
//        reportLevel = "high"
//        classes = files("$project.buildDir/intermediates/classes/")
//
//        source 'src'
//        include '**/*.java'
//        exclude '**/gen/**'
//
//        reports {
//            xml.enabled false
//            html.enabled true
//        }
//
//        classpath = files()
//    }
//
//    task pmd(type: Pmd) {
//        ignoreFailures = true
//        ruleSets = [ "java-basic", "java-strings", "java-braces" ]
//
//        source 'src'
//        include '**/*.java'
//        exclude '**/gen/**'
//
//        reports {
//            xml.enabled = true
//            html.enabled = true
//        }
//    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext {
    supportLibVersion = "25.0.0"
    playServicesVersion = "9.8.0"
    retrofitVersion = "2.1.0"

    // Build the version code
    buildVersionCode = {
        def versionPropsFile = file('gradle.properties')

        if (versionPropsFile.canRead()) {
            Properties versionProps = new Properties()

            versionProps.load(new FileInputStream(versionPropsFile))

            def code = versionProps['VERSION_CODE'].toInteger() + 1

            versionProps['VERSION_CODE'] = code.toString()
            versionProps.store(versionPropsFile.newWriter(),
                    "suppress inspection \"UnusedProperty\" for whole file")

            return code
        } else {
            throw new GradleException("Could not read gradle.properties!")
        }
    }
}